{"version":3,"sources":["components/NewsAggregator/NewsAggregator.js","components/NewsAggregator/AppBar.js","App.js","serviceWorker.js","index.js","images/application.svg"],"names":["Option","NewsAggregator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onchangeCall","chosenCategory","console","log","setState","fetch","concat","method","then","response","json","joke","value","catch","error","capitalizeFirstLetter","string","charAt","toUpperCase","slice","state","categories","_this2","data","_this3","layout","Header","Footer","Content","react_default","a","createElement","style","textAlign","backgroundColor","minHeight","row","type","justify","col","es_select","width","marginBottom","marginTop","placeholder","optionFilterProp","onChange","filterOption","input","option","children","toLowerCase","indexOf","map","cat","card","title","length","bordered","overflow","padding","borderRadius","Component","AppBar","className","alt","src","logo","App","components_NewsAggregator_AppBar","components_NewsAggregator_NewsAggregator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.bc2f7768.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Layout, Table, Select, Card, Row, Col } from 'antd';\r\n\r\nconst { Option } = Select;\r\nconst url = 'https://api.chucknorris.io/jokes/categories';\r\nclass NewsAggregator extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcategories: [],\r\n\t\t\tchosenCategory: [],\r\n\t\t\tjoke: [],\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch(url, {\r\n\t\t\tmethod: 'GET'\r\n\t\t})\r\n\t\t\t// eslint-disable-next-line no-console\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tconsole.log(data);\r\n\t\t\t\tthis.setState({ categories: data });\r\n\t\t\t})\r\n\t\t\t.catch(error => console.log('error:', error));\r\n\t}\r\n\r\n\tonchangeCall = chosenCategory => {\r\n\t\tconsole.log(chosenCategory);\r\n\t\tthis.setState({ chosenCategory });\r\n\t\tfetch(\r\n\t\t\t`https://api.chucknorris.io/jokes/random?category=${chosenCategory}`,\r\n\t\t\t{\r\n\t\t\t\tmethod: 'GET'\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(joke => {\r\n\t\t\t\tconsole.log(joke);\r\n\t\t\t\tthis.setState({ joke: joke.value });\r\n\t\t\t})\r\n\t\t\t.catch(error => console.log('error:', error));\r\n\t};\r\n\r\n\r\n\tcapitalizeFirstLetter = string =>\r\n\t\tstring.charAt(0).toUpperCase() + string.slice(1);\r\n\r\n\trender() {\r\n\t\tconst { Header, Footer, Content } = Layout;\r\n\t\tconsole.log(this.state);\r\n\t\treturn (\r\n\t\t\t<div style={{ textAlign: 'center', backgroundColor: '#C2DFFF' }}>\r\n\t\t\t\t\t<div style={{ minHeight: '100vh' }}>\r\n\t\t\t\t\t\t<Row type=\"flex\" justify=\"center\">\r\n\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: 200, marginBottom: 50, marginTop: 50 }}\r\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select a category\"\r\n\t\t\t\t\t\t\t\t\t\toptionFilterProp=\"children\"\r\n\t\t\t\t\t\t\t\t\t\tonChange={this.onchangeCall}\r\n\t\t\t\t\t\t\t\t\t\tfilterOption={(input, option) =>\r\n\t\t\t\t\t\t\t\t\t\t\toption.props.children\r\n\t\t\t\t\t\t\t\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t\t\t\t\t\t\t\t.indexOf(input.toLowerCase()) >= 0\r\n\t\t\t\t\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t\t\t\t\t{this.state.categories.map(cat => (\r\n\t\t\t\t\t\t\t\t\t\t\t<Option value={cat}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.capitalizeFirstLetter(cat)}\r\n\t\t\t\t\t\t\t\t\t\t\t</Option>\r\n\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t\t\t\ttitle={\r\n\t\t\t\t\t\t\t\t\t\t\tthis.state.chosenCategory.length > 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t? this.capitalizeFirstLetter(this.state.chosenCategory) : 'Selected Category'}\r\n\t\t\t\t\t\t\t\t\t\tbordered={false}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: 400, minHeight: 200, overflow: 'scroll', padding: 20, borderRadius: '10px' }}>\r\n\t\t\t\t\t\t\t\t\t\t<p style={{textAlign: 'left' }}>{this.state.joke.length > 1 ? this.state.joke : 'Chuck Norris never searches online, he stares at his computer and it gives him the answer'}</p>\r\n\t\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NewsAggregator;\r\n","import React, {Component} from \"react\";\r\nimport \"./AppBar.css\"\r\nimport logo from \"../../images/application.svg\"\r\n\r\nclass AppBar extends Component{\r\n    render() {\r\n        return (\r\n            <div className={\"appbar\"}>\r\n                <table className='titleBar'>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <img alt=\"app icon\" width= \"70\" src={logo}/>\r\n                        </td>\r\n                        <td>\r\n                            <h1 className='header'> ChuckNorrisJokes</h1>\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default AppBar;","import React from 'react';\r\nimport NewsAggregator from './components/NewsAggregator/NewsAggregator';\r\nimport AppBar from \"./components/NewsAggregator/AppBar\";\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<AppBar/>\r\n\t\t\t<NewsAggregator />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/application.95605289.svg\";"],"sourceRoot":""}